[{"/Users/elenaderic/Desktop/CHAT App - Elena/src/index.js":"1","/Users/elenaderic/Desktop/CHAT App - Elena/src/App.js":"2","/Users/elenaderic/Desktop/CHAT App - Elena/src/reportWebVitals.js":"3","/Users/elenaderic/Desktop/CHAT App - Elena/src/Components/Input.js":"4","/Users/elenaderic/Desktop/CHAT App - Elena/src/Components/Message.js":"5","/Users/elenaderic/Desktop/CHAT App - Elena/src/Components/Login/Login/Login.js":"6","/Users/elenaderic/Desktop/CHAT App - Elena/src/Components/Login/Card/Card.js":"7","/Users/elenaderic/Desktop/CHAT App - Elena/src/Components/Login/Button/Button.js":"8"},{"size":517,"mtime":1649946552855,"results":"9","hashOfConfig":"10"},{"size":3215,"mtime":1649946566222,"results":"11","hashOfConfig":"10"},{"size":0,"mtime":1649864228000,"results":"12","hashOfConfig":"10"},{"size":696,"mtime":1649945625794,"results":"13","hashOfConfig":"10"},{"size":1277,"mtime":1649945635736,"results":"14","hashOfConfig":"10"},{"size":3362,"mtime":1649945284770,"results":"15","hashOfConfig":"10"},{"size":163,"mtime":1648659720000,"results":"16","hashOfConfig":"10"},{"size":299,"mtime":1648659725000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"wybyy6",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"21"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/elenaderic/Desktop/CHAT App - Elena/src/index.js",[],[],["46","47"],"/Users/elenaderic/Desktop/CHAT App - Elena/src/App.js",["48","49","50","51"],[],"import './App.css';\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport Input from \"./Components/Input\";\r\nimport Message from \"./Components/Message\";\r\nimport Login from './Components/Login/Login/Login';\r\n\r\nimport avatarAstronaut from \"./Components/Assets/avatarAstronaut.svg\"\r\nimport avatarNinja from \"./Components/Assets/avatarNinja.svg\"\r\nimport avatarDetective from \"./Components/Assets/avatarDetective.svg\"\r\n\r\n\r\n\r\nfunction randomColor() { \r\n  return \"#\" + Math.floor(Math.random() * 0xffffff).toString(16);\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [user, setUser] = useState({\r\n    username: '',\r\n    randomColor: randomColor(),\r\n    avatar: avatarNinja, \r\n    avatarId: 0\r\n  });\r\n\r\n  const [messages, setMessages] = useState([]); \r\n  const [drone, setDrone] = useState(); \r\n  const [users, setUsers] = useState(); \r\n\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false); \r\n\r\n  \r\n  const [usernameSubmitted, setUsernameSubmitted] = useState(false)\r\n\r\n\r\n  useEffect(() => {\r\n    if(usernameSubmitted){\r\n      console.log(`ovo je to ${usernameSubmitted}`)\r\n      const drone = new window.Scaledrone(\"feNvXbkiduwaGrAy\", { \r\n        data: user,\r\n      });\r\n      setDrone(drone);\r\n    }\r\n    \r\n  }, [usernameSubmitted]); \r\n\r\nuseEffect(() => {\r\n  if (drone) {  \r\n    drone.on(\"open\", (error) => {\r\n      if (error) {\r\n        console.log(\"Error on connecting\", error);\r\n      }\r\n\r\n     \r\n\r\n      const chatRoom = drone.subscribe(\"observable-room\"); \r\n\r\n      chatRoom.on(\"open\", (error) => { \r\n        if (error) {\r\n          return console.error(error);\r\n        }\r\n        \r\n      });\r\n\r\n      chatRoom.on(\"data\", (text, chatUser) => { \r\n         setUsers(drone.clientId);\r\n        \r\n\r\n        const username = chatUser.clientData.username; \r\n        const chatUserID = chatUser.id;\r\n        const userColor = chatUser.clientData.randomColor;\r\n        const userAvatar = chatUser.clientData.avatar;\r\n        const timeStamp = new Date()\r\n\r\n        console.log(`text je ${text}`)\r\n        \r\n        setMessages((oldArray) => [\r\n          ...oldArray,\r\n          { text, username, userColor, chatUserID, user, timeStamp, userAvatar }, \r\n        ]);\r\n      });\r\n    });\r\n  }\r\n}, [drone])\r\n\r\n  const onSendMessage = (message) => { \r\n    if (message) {\r\n      drone.publish({\r\n        room: \"observable-room\",\r\n        message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const loginHandler = (avatar, username) => {\r\n    setUser(() => {\r\n      return { id: drone.clientId, avatar: avatar, username: username }; \r\n    }); \r\n    setIsLoggedIn(true); \r\n    console.log('User', username, 'connected!');\r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    console.log(\"user\")\r\n    console.log(user)\r\n    }, [user]) \r\n\r\n  return (\r\n    <div className=\"App\">\r\n    {!isLoggedIn && <Login user={user} setUser={setUser} usernameSubmitted={usernameSubmitted} setUsernameSubmitted={setUsernameSubmitted} onLogin={loginHandler}/>} \r\n    {isLoggedIn && \r\n      \r\n      <>\r\n        <div className=\"App-header\">\r\n          <h1>My Chat App</h1>\r\n        </div>\r\n        <div>\r\n          <Message messages={messages} users={users}/>\r\n          <Input onSendMessage={onSendMessage} />\r\n        </div>\r\n      </>\r\n    } \r\n    </div> \r\n  );\r\n}\r\n\r\nexport default App;\r\n","/Users/elenaderic/Desktop/CHAT App - Elena/src/reportWebVitals.js",[],[],"/Users/elenaderic/Desktop/CHAT App - Elena/src/Components/Input.js",[],[],"/Users/elenaderic/Desktop/CHAT App - Elena/src/Components/Message.js",["52","53","54"],[],"import React, { useRef, useEffect } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n\r\nconst Message = ({ messages, users }) => {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <ul className=\"Messages-list\">\r\n        {messages.map((message) => {\r\n          const timeStamp = { \r\n            hours: message.timeStamp.getHours() < 10 ? '0' + message.timeStamp.getHours() : message.timeStamp.getHours(),\r\n            minutes: message.timeStamp.getMinutes() < 10 ? '0' + message.timeStamp.getMinutes() : message.timeStamp.getMinutes()\r\n          }\r\n          return(\r\n          <div key={messages.indexOf(message)} className={(message.chatUserID === users) \r\n            ? \"Messages-message currentMember\"\r\n            : \"Messages-message otherMember\"}>\r\n            {}\r\n            <img src={message.userAvatar} alt=\" \" className=\"avatar\" style={{backgroundColor: `${message.userColor}`}}/>\r\n            <div className=\"Message-content\">\r\n              <div className=\"username\">{message.username}</div>\r\n              <div className=\"timestamp\">{timeStamp.hours}:{timeStamp.minutes}</div>\r\n              <div className=\"text\">{message.text}</div>\r\n            </div>\r\n            \r\n          </div>\r\n          )\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;","/Users/elenaderic/Desktop/CHAT App - Elena/src/Components/Login/Login/Login.js",["55","56","57"],[],"import React, { useEffect, useState } from 'react';\r\nimport Button from '../Button/Button';\r\n\r\nimport blankAvatar from '../../Assets/blankAvatar.png';\r\nimport Card from '../Card/Card';\r\n\r\nimport avatarAstronaut from \"../../Assets/avatarAstronaut.svg\"\r\nimport avatarNinja from \"../../Assets/avatarNinja.svg\"\r\nimport avatarDetective from \"../../Assets/avatarDetective.svg\"\r\n\r\n\r\n\r\nexport default function Login(props) {\r\n    const [enteredUsername, setEnteredUsername] = useState('');\r\n    const [usernameIsValid, setUsernameIsValid] = useState(1); \r\n    \r\n    const [avatar, setAvatar] = useState(blankAvatar);\r\nuseEffect(() => {\r\nconsole.log(props.user);\r\n}, [props.user])\r\n\r\n    \r\n    const handleAddUser = (event) => {\r\n      console.log(\"ovo je user\")\r\n      console.log(props.user)\r\n        event.preventDefault();\r\n        if (props.user.username.trim().length === 0) { \r\n          setUsernameIsValid(false); \r\n          return;\r\n        }\r\n        setUsernameIsValid(true);\r\n        props.onLogin(avatar, props.user.username); \r\n      };\r\n\r\n      \r\n      const handleUsernameChange = (event) => { \r\n        props.setUser(prevValues => (\r\n          {...prevValues,  username: event.target.value})\r\n          )\r\n      };\r\n\r\n      \r\n      const handleColorChange = (event) => {\r\n        props.setUser(prevValues => (\r\n          {...prevValues,  randomColor: event.target.value})\r\n          )\r\n      }\r\n      const submitUser = () => {\r\n        props.setUsernameSubmitted(true)\r\n      }\r\n\r\n      \r\n      const handleAvatar = (avatar) => {\r\n        console.log(avatar);\r\n        let userAvatar\r\n    \r\n        switch (avatar) {\r\n          case 1: userAvatar = avatarAstronaut; break;\r\n          case 2: userAvatar = avatarNinja; break;\r\n          default: userAvatar = avatarDetective; break;\r\n        }\r\n    \r\n        props.setUser(prevValues => ({ ...prevValues, avatar: userAvatar, avatarId: avatar}))\r\n      }\r\n    \r\n\r\n    return(\r\n        <Card\r\n            className={\r\n                !usernameIsValid ? \"login invalid\" : \"login\"  \r\n            }\r\n            >\r\n          <form onSubmit={handleAddUser}>\r\n              <h1>Chat Application</h1>\r\n              <label>Your Nickname</label>\r\n              <input className=\"inputText\"\r\n              type='text'\r\n              placeholder='Nickname'\r\n              onChange={handleUsernameChange}\r\n              /> \r\n              <label>Your Avatar</label>\r\n              <div className=\"avatars\">\r\n                <div className={`item ${props.user.avatarId === 1 ? 'active' : ''}`} onClick={() => handleAvatar(1)}>\r\n                  <img src={avatarAstronaut} alt=\"\" />\r\n                </div>\r\n                <div className={`item ${props.user.avatarId === 2 ? 'active' : ''}`} onClick={() => handleAvatar(2)}>\r\n                  <img src={avatarNinja} alt=\"\" />\r\n                </div>\r\n                <div className={`item ${props.user.avatarId === 3 ? 'active' : ''}`} onClick={() => handleAvatar(3)}>\r\n                  <img src={avatarDetective} alt=\"\" />\r\n                </div>\r\n              </div>\r\n              \r\n              <label>Select Color</label>\r\n              <input className=\"inputColor\" type=\"color\" onChange={handleColorChange}></input>\r\n              \r\n              <Button type='submit' onClick={submitUser}>Join Chat</Button>\r\n          </form>\r\n        </Card>\r\n    )\r\n}","/Users/elenaderic/Desktop/CHAT App - Elena/src/Components/Login/Card/Card.js",[],[],"/Users/elenaderic/Desktop/CHAT App - Elena/src/Components/Login/Button/Button.js",[],[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":8,"column":8,"nodeType":"64","messageId":"65","endLine":8,"endColumn":23},{"ruleId":"62","severity":1,"message":"66","line":10,"column":8,"nodeType":"64","messageId":"65","endLine":10,"endColumn":23},{"ruleId":"67","severity":1,"message":"68","line":46,"column":6,"nodeType":"69","endLine":46,"endColumn":25,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":85,"column":4,"nodeType":"69","endLine":85,"endColumn":11,"suggestions":"72"},{"ruleId":"62","severity":1,"message":"73","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":23},{"ruleId":"62","severity":1,"message":"74","line":1,"column":25,"nodeType":"64","messageId":"65","endLine":1,"endColumn":34},{"ruleId":"62","severity":1,"message":"75","line":2,"column":16,"nodeType":"64","messageId":"65","endLine":2,"endColumn":22},{"ruleId":"62","severity":1,"message":"76","line":14,"column":12,"nodeType":"64","messageId":"65","endLine":14,"endColumn":27},{"ruleId":"62","severity":1,"message":"77","line":14,"column":29,"nodeType":"64","messageId":"65","endLine":14,"endColumn":47},{"ruleId":"62","severity":1,"message":"78","line":17,"column":20,"nodeType":"64","messageId":"65","endLine":17,"endColumn":29},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'avatarAstronaut' is defined but never used.","Identifier","unusedVar","'avatarDetective' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["81"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMessages' needs the current value of 'user'.",["82"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","'uuidv4' is defined but never used.","'enteredUsername' is assigned a value but never used.","'setEnteredUsername' is assigned a value but never used.","'setAvatar' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [user, usernameSubmitted]",{"range":"87","text":"88"},"Update the dependencies array to be: [drone, user]",{"range":"89","text":"90"},[1197,1216],"[user, usernameSubmitted]",[2175,2182],"[drone, user]"]